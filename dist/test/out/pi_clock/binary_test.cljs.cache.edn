{:rename-macros {}, :renames {}, :use-macros {testing cljs.test, is cljs.test, deftest cljs.test, run-tests cljs.test}, :excludes #{}, :name pi-clock.binary-test, :imports nil, :requires {bin pi-clock.binary, pi-clock.binary pi-clock.binary, cljs.test cljs.test}, :uses nil, :defs {->binary {:protocol-inline nil, :meta {:file "C:\\Users\\caleb\\src\\pi-clock\\test\\pi_clock\\binary_test.cljs", :line 5, :column 10, :end-line 5, :end-column 18}, :name pi-clock.binary-test/->binary, :variadic false, :file "C:\\Users\\caleb\\src\\pi-clock\\test\\pi_clock\\binary_test.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, pad-zeros {:protocol-inline nil, :meta {:file "C:\\Users\\caleb\\src\\pi-clock\\test\\pi_clock\\binary_test.cljs", :line 12, :column 10, :end-line 12, :end-column 19}, :name pi-clock.binary-test/pad-zeros, :variadic false, :file "C:\\Users\\caleb\\src\\pi-clock\\test\\pi_clock\\binary_test.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, binpad {:protocol-inline nil, :meta {:file "C:\\Users\\caleb\\src\\pi-clock\\test\\pi_clock\\binary_test.cljs", :line 21, :column 10, :end-line 21, :end-column 16}, :name pi-clock.binary-test/binpad, :variadic false, :file "C:\\Users\\caleb\\src\\pi-clock\\test\\pi_clock\\binary_test.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 21, :end-line 21, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}}, :require-macros {cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{seq pi-clock.binary-test/->binary bin/binpad = bin/->binary pad-zeros pi-clock.binary-test/binpad :ns :name :file :end-column ->binary binpad :type :column pi-clock.binary-test/pad-zeros :fail pi-clock.binary-test :line not :expected :end-line :error :pass :arglists :actual :doc bin/pad-zeros :test :message}, :order [:type :expected :actual :message :error = bin/->binary seq :pass :fail not pi-clock.binary-test/->binary :ns :name :file :end-column :column :line :end-line :arglists :doc :test pi-clock.binary-test ->binary bin/pad-zeros pi-clock.binary-test/pad-zeros pad-zeros bin/binpad pi-clock.binary-test/binpad binpad]}, :doc nil}