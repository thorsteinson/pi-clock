{:rename-macros {}, :renames {}, :use-macros {testing cljs.test, is cljs.test, deftest cljs.test, run-tests cljs.test}, :excludes #{}, :name pi-clock.bridge-test, :imports nil, :requires {bridge pi-clock.bridge, pi-clock.bridge pi-clock.bridge, cljs.test cljs.test}, :uses nil, :defs {assign-leds {:protocol-inline nil, :meta {:file "C:\\Users\\caleb\\src\\pi-clock\\test\\pi_clock\\bridge_test.cljs", :line 5, :column 10, :end-line 5, :end-column 21}, :name pi-clock.bridge-test/assign-leds, :variadic false, :file "test\\pi_clock\\bridge_test.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}}, :require-macros {cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{pi-clock.bridge-test seq = bridge/assign-leds pi-clock.bridge-test/assign-leds :ns :name assign-leds :file :end-column :type :pin :column :fail :line not :expected :end-line :error :on :pass :arglists :actual :doc :test :message}, :order [:type :expected :actual :message :error = bridge/assign-leds seq :pin :on :pass :fail not pi-clock.bridge-test/assign-leds :ns :name :file :end-column :column :line :end-line :arglists :doc :test pi-clock.bridge-test assign-leds]}, :doc nil}